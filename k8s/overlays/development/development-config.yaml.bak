apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: microservice-app
data:
  NODE_ENV: "development"
  LOG_LEVEL: "debug"
  # Enable hot reload and file watching
  CHOKIDAR_USEPOLLING: "true"
  WATCHPACK_POLLING: "true"
  # NestJS specific watch options
  NEST_WATCH: "true"
  # Optimize for development
  NODE_OPTIONS: "--max-old-space-size=4096"
  
---
# Shopify Service - Hot Reload Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shopify-service
  namespace: microservice-app
spec:
  template:
    spec:
      containers:
      - name: shopify-service
        command: ["pnpm", "run", "start:dev"]
        env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
        - name: NEST_WATCH
          value: "true"
        volumeMounts:
        # Mount source code for hot reload
        - name: shopify-source
          mountPath: /app/src
        # Mount package.json for dependency changes detection
        - name: shopify-package
          mountPath: /app/package.json
          subPath: package.json
        # Mount config files
        - name: shopify-config
          mountPath: /app/nest-cli.json
          subPath: nest-cli.json
        - name: shopify-config
          mountPath: /app/tsconfig.json
          subPath: tsconfig.json
        # Separate node_modules to avoid conflicts
        - name: shopify-node-modules
          mountPath: /app/node_modules
      volumes:
      - name: shopify-source
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/shopify/src
          type: Directory
      - name: shopify-package
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/shopify
          type: Directory
      - name: shopify-config
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/shopify
          type: Directory
      - name: shopify-node-modules
        emptyDir: {}

---
# Auth Service - Hot Reload Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: microservice-app
spec:
  template:
    spec:
      containers:
      - name: auth-service
        command: ["pnpm", "run", "start:dev"]
        env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
        - name: NEST_WATCH
          value: "true"
        volumeMounts:
        - name: auth-source
          mountPath: /app/src
        - name: auth-package
          mountPath: /app/package.json
          subPath: package.json
        - name: auth-config
          mountPath: /app/nest-cli.json
          subPath: nest-cli.json
        - name: auth-config
          mountPath: /app/tsconfig.json
          subPath: tsconfig.json
        - name: auth-node-modules
          mountPath: /app/node_modules
      volumes:
      - name: auth-source
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/auth/src
          type: Directory
      - name: auth-package
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/auth
          type: Directory
      - name: auth-config
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/auth
          type: Directory
      - name: auth-node-modules
        emptyDir: {}

---
# App Service - Hot Reload Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-service
  namespace: microservice-app
spec:
  template:
    spec:
      containers:
      - name: app-service
        command: ["pnpm", "run", "start:dev"]
        env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
        - name: NEST_WATCH
          value: "true"
        volumeMounts:
        - name: app-source
          mountPath: /app/src
        - name: app-package
          mountPath: /app/package.json
          subPath: package.json
        - name: app-config
          mountPath: /app/nest-cli.json
          subPath: nest-cli.json
        - name: app-config
          mountPath: /app/tsconfig.json
          subPath: tsconfig.json
        - name: app-node-modules
          mountPath: /app/node_modules
      volumes:
      - name: app-source
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/app/src
          type: Directory
      - name: app-package
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/app
          type: Directory
      - name: app-config
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/app
          type: Directory
      - name: app-node-modules
        emptyDir: {}

---
# Webhook Service - Hot Reload Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-service
  namespace: microservice-app
spec:
  template:
    spec:
      containers:
      - name: webhook-service
        command: ["pnpm", "run", "start:dev"]
        env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
        - name: NEST_WATCH
          value: "true"
        volumeMounts:
        - name: webhook-source
          mountPath: /app/src
        - name: webhook-package
          mountPath: /app/package.json
          subPath: package.json
        - name: webhook-config
          mountPath: /app/nest-cli.json
          subPath: nest-cli.json
        - name: webhook-config
          mountPath: /app/tsconfig.json
          subPath: tsconfig.json
        - name: webhook-node-modules
          mountPath: /app/node_modules
      volumes:
      - name: webhook-source
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/webhook/src
          type: Directory
      - name: webhook-package
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/webhook
          type: Directory
      - name: webhook-config
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/webhook
          type: Directory
      - name: webhook-node-modules
        emptyDir: {}

---
# API Gateway - Hot Reload Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
  namespace: microservice-app
spec:
  template:
    spec:
      containers:
      - name: gateway-service
        command: ["pnpm", "run", "start:dev"]
        env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
        - name: NEST_WATCH
          value: "true"
        volumeMounts:
        - name: gateway-source
          mountPath: /app/src
        - name: gateway-package
          mountPath: /app/package.json
          subPath: package.json
        - name: gateway-config
          mountPath: /app/nest-cli.json
          subPath: nest-cli.json
        - name: gateway-config
          mountPath: /app/tsconfig.json
          subPath: tsconfig.json
        - name: gateway-node-modules
          mountPath: /app/node_modules
      volumes:
      - name: gateway-source
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/api-gateway/src
          type: Directory
      - name: gateway-package
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/api-gateway
          type: Directory
      - name: gateway-config
        hostPath:
          path: PROJECT_ROOT_PLACEHOLDER/web/api-gateway
          type: Directory
      - name: gateway-node-modules
        emptyDir: {}